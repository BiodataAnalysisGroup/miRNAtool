q()
pwd
version
x1 <- c(0,0,1)
sqrt(2)
x2 <- c(-sqrt(3)/2 , 0 , -1/2)
x3 <- c(sqrt(3)/4, -sqrt(3)/4 , -1/2)
x4 <- c(-sqrt(3)/4, -sqrt(3)/4 , -1/2)
dist(rbind(x1,x2))
dist(rbind(x1,x3))
dist(rbind(x1,x4))
dist(rbind(x2,x3))
dist(rbind(x2,x4))
dist(rbind(x3,x4))
x3 <- c(3/4, -sqrt(3)/4 , -1/2)
x4 <- c(-3/4, -sqrt(3)/4 , -1/2)
norm(x1)
x1
norm_vec <- function(x) sqrt(sum(x^2))
norm_vec(x1)
norm_vec(x2)
norm_vec(x3)
norm_vec(x4)
dist(rbind(x1,x2))
dist(rbind(x1,x3))
dist(rbind(x1,x4))
dist(rbind(x2,x3))
dist(rbind(x2,x4))
dist(rbind(x3,x4))
x2
x4
x3 <- c(sqrt(3)/4, -3/4 , -1/2)
x4 <- c(sqrt(3)/4, 3/4 , -1/2)
dist(rbind(x1,x2))
dist(rbind(x1,x3))
dist(rbind(x1,x4))
dist(rbind(x2,x3))
dist(rbind(x2,x4))
dist(rbind(x3,x4))
d <- 2*sqrt(3)/3
x1*d
sqrt(3)
x1 <- c(0,0,sqrt(2))
x2 <- c(0,1,0)
x3 <- c(-sqrt(3)/2, -1/2, 0)
x4 <- c(sqrt(3)/2, -1/2, 0)
dist(rbind(x1,x2))
dist(rbind(x1,x3))
dist(rbind(x1,x4))
dist(rbind(x2,x3))
dist(rbind(x2,x4))
dist(rbind(x3,x4))
x1 <- c(0,0,3)
x1 <- c(0,2,0)
x3 <- c(-2,-1,0)
x1 <- c(0,0,3)
x2 <- c(0,2,0)
x4 <- c(2,-1,0)
dist(rbind(x1,x2))
dist(rbind(x1,x3))
dist(rbind(x1,x4))
dist(rbind(x2,x3))
dist(rbind(x2,x4))
dist(rbind(x3,x4))
x1 <- c(3,2,3)
x2 <- c(3,4,0)
x3 <- c(1,1,0)
x4 <- c(4,4,0)
dist(rbind(x1,x2))
dist(rbind(x1,x3))
dist(rbind(x1,x4))
dist(rbind(x2,x3))
dist(rbind(x2,x4))
dist(rbind(x3,x4))
dist(rbind(x4,x4))
x4 <- c(5,1,0)
dist(rbind(x1,x2))
dist(rbind(x1,x3))
dist(rbind(x1,x4))
dist(rbind(x2,x3))
dist(rbind(x2,x4))
dist(rbind(x3,x4))
version
setwd("~/INEBwork/Maria_R/miRNAtool/data-script")
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
getwd()
analysis.path=getwd()  ;analysis.path
#analysis.path <- "D://exosomes//data"
#setwd(analysis.path)
getwd()
# Installing packages
#install.packages("tidyverse")
#install.packages("naniar")
#BiocManager::install("prada")
# Source files
# qc.R : quality control
# diff_analysis.R : differential analysis
# fa.R : functional analysis
source("qc.R")
source("diff_analysis.R")
source("fa.R")
# Libraries
library(devtools)
library(data.table)
library(tidyverse)
library(naniar)
library(prada)
library(gsubfn)
# Num of plates
plates <- c(1:3)
# Creating output folder
dir.create("output")
for (plate in plates){
to_create <- paste('output/plate', plate, sep = '')
dir.create(to_create)
}
dir.create("output/Differential Analysis")
dir.create("output/Functional Analysis")
dir.create("output/Tables")
# Creating the report file
report_file <- 'output/report.txt'
file.create(report_file)
# Threshold percentage (values: from 0 to 1)
# In case the percentage of NA's is higher than threshold, the sample is excluded
na_threshold_perc <- 0.1
to_report <- paste('Selected NAs percentage threshold: ', na_threshold_perc, sep = '')
cat(to_report, file = report_file, sep = '\n', append = TRUE)
# RTC criterion threshold
rtc_threshold <- 5
to_report <- paste('Selected RTC threshold: ', rtc_threshold, sep = '')
cat(to_report, file = report_file, sep = '\n', append = TRUE)
# Select endogenous or exogenous normalization
normalization_en_ex <- 'endogenous'
# Select sign.f.table p-val criterion
sign_table_pval <- 0.01
# Mirs: select validated or predicted
validated_or_predicted <- 'validated'
# select go_enrich criterion
go_criterion <- 0.05
# select the KEGG enrich criterion
kegg_enrich_criterion <- 0.05
#### MAIN CODE #########
list.files()
mirs<- fread("miRs_annotation_3plates.csv")
data<- fread("miRNome_data.csv")
meta<- fread("phenodata.csv")
head(meta)
data<- as.data.frame(data)
data$ID<- mirs$`miRNA ID`
data$plate<- mirs$Plate
head(data)
# Substitutes the ',' charachter with '.' and then converts strings to numeric data
# 2 stands for "iterate over columns"
data[,c(2:7)]<- apply(apply(data[,c(2:7)], 2, gsub, patt=",", replace="."), 2, as.numeric)
# Drop data with "blank" ID
data <- data[c(which(data$ID != "blank")), ]
write.csv(data, 'total_data.csv')
#TO DO: merge the three plates before the diff analysis
# Initial sample names
normalized_data <- NULL
# QC analysis
for (plate in plates){
print(paste('Analysis for plate ', plate, sep = ''))
norm_data <- QC(copy(data), plate, 'output', na_threshold_perc, rtc_threshold ,normalization_en_ex, report_file)
norm_data$plate <- paste('Plate', plate, sep = ' ')
if (is.null(normalized_data)){
normalized_data <- rbind(normalized_data, norm_data)
} else {
normalized_data <- normalized_data[,which(colnames(normalized_data) %in% colnames(norm_data))]
norm_data <- norm_data[,which(colnames(norm_data) %in% colnames(normalized_data))]
normalized_data <- rbind(normalized_data, norm_data)
}
}
if (!is.null(normalized_data)){
# diff analysis and functional analysis
normalized_data<- normalized_data[!duplicated(normalized_data$ID),]
write.csv(norm_data, 'output/Tables/normalized_data.csv')
sign.table.f <- diff_analysis(normalized_data[,-dim(normalized_data)[2]], meta, 'output/Differential Analysis', sign_table_pval)
functional_analysis(sign.table.f, validated_or_predicted, kegg_enrich_criterion, go_criterion, 'output/Functional Analysis')
} else{
# Todo: add some warnings - tasks here
print("All plates were rejected from quality control analysis")
}
# 1: input yaml, koitaw to senario (gia ta krithria - parametrous)
# 2: Kanw pio sugkekrimena ta sxolia apo apopsh kwdika
# 2.5: Pws ena project sthn R ginetia paketo, diavasma
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
getwd()
analysis.path=getwd()  ;analysis.path
#analysis.path <- "D://exosomes//data"
#setwd(analysis.path)
getwd()
# Installing packages
#install.packages("tidyverse")
#install.packages("naniar")
#BiocManager::install("prada")
# Source files
# qc.R : quality control
# diff_analysis.R : differential analysis
# fa.R : functional analysis
source("qc.R")
source("diff_analysis.R")
source("fa.R")
# Libraries
library(devtools)
library(data.table)
library(tidyverse)
library(naniar)
library(prada)
library(gsubfn)
# Num of plates
plates <- c(1:3)
# Creating output folder
dir.create("output")
for (plate in plates){
to_create <- paste('output/plate', plate, sep = '')
dir.create(to_create)
}
dir.create("output/Differential Analysis")
dir.create("output/Functional Analysis")
dir.create("output/Tables")
# Creating the report file
report_file <- 'output/report.txt'
file.create(report_file)
# Threshold percentage (values: from 0 to 1)
# In case the percentage of NA's is higher than threshold, the sample is excluded
na_threshold_perc <- 0.1
to_report <- paste('Selected NAs percentage threshold: ', na_threshold_perc, sep = '')
cat(to_report, file = report_file, sep = '\n', append = TRUE)
# RTC criterion threshold
rtc_threshold <- 5
to_report <- paste('Selected RTC threshold: ', rtc_threshold, sep = '')
cat(to_report, file = report_file, sep = '\n', append = TRUE)
# Select endogenous or exogenous normalization
normalization_en_ex <- 'endogenous'
# Select sign.f.table p-val criterion
sign_table_pval <- 0.01
# Mirs: select validated or predicted
validated_or_predicted <- 'validated'
# select go_enrich criterion
go_criterion <- 0.05
# select the KEGG enrich criterion
kegg_enrich_criterion <- 0.05
#### MAIN CODE #########
list.files()
mirs<- fread("miRs_annotation_3plates.csv")
data<- fread("miRNome_data.csv")
meta<- fread("phenodata.csv")
head(meta)
data<- as.data.frame(data)
data$ID<- mirs$`miRNA ID`
data$plate<- mirs$Plate
head(data)
# Substitutes the ',' charachter with '.' and then converts strings to numeric data
# 2 stands for "iterate over columns"
data[,c(2:7)]<- apply(apply(data[,c(2:7)], 2, gsub, patt=",", replace="."), 2, as.numeric)
# Drop data with "blank" ID
data <- data[c(which(data$ID != "blank")), ]
write.csv(data, 'total_data.csv')
#TO DO: merge the three plates before the diff analysis
# Initial sample names
normalized_data <- NULL
# QC analysis
for (plate in plates){
print(paste('Analysis for plate ', plate, sep = ''))
norm_data <- QC(copy(data), plate, 'output', na_threshold_perc, rtc_threshold ,normalization_en_ex, report_file)
norm_data$plate <- paste('Plate', plate, sep = ' ')
if (is.null(normalized_data)){
normalized_data <- rbind(normalized_data, norm_data)
} else {
normalized_data <- normalized_data[,which(colnames(normalized_data) %in% colnames(norm_data))]
norm_data <- norm_data[,which(colnames(norm_data) %in% colnames(normalized_data))]
normalized_data <- rbind(normalized_data, norm_data)
}
}
if (!is.null(normalized_data)){
# diff analysis and functional analysis
normalized_data<- normalized_data[!duplicated(normalized_data$ID),]
write.csv(normalized_data, 'output/Tables/normalized_data.csv')
sign.table.f <- diff_analysis(normalized_data[,-dim(normalized_data)[2]], meta, 'output/Differential Analysis', sign_table_pval)
functional_analysis(sign.table.f, validated_or_predicted, kegg_enrich_criterion, go_criterion, 'output/Functional Analysis')
} else{
# Todo: add some warnings - tasks here
print("All plates were rejected from quality control analysis")
}
# 1: input yaml, koitaw to senario (gia ta krithria - parametrous)
# 2: Kanw pio sugkekrimena ta sxolia apo apopsh kwdika
# 2.5: Pws ena project sthn R ginetia paketo, diavasma
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
getwd()
analysis.path=getwd()  ;analysis.path
#analysis.path <- "D://exosomes//data"
#setwd(analysis.path)
getwd()
# Installing packages
#install.packages("tidyverse")
#install.packages("naniar")
#BiocManager::install("prada")
# Source files
# qc.R : quality control
# diff_analysis.R : differential analysis
# fa.R : functional analysis
source("qc.R")
source("diff_analysis.R")
source("fa.R")
# Libraries
library(devtools)
library(data.table)
library(tidyverse)
library(naniar)
library(prada)
library(gsubfn)
# Num of plates
plates <- c(1:3)
# Creating output folder
dir.create("output")
for (plate in plates){
to_create <- paste('output/plate', plate, sep = '')
dir.create(to_create)
}
dir.create("output/Differential Analysis")
dir.create("output/Functional Analysis")
dir.create("output/Tables")
# Creating the report file
report_file <- 'output/report.txt'
file.create(report_file)
# Threshold percentage (values: from 0 to 1)
# In case the percentage of NA's is higher than threshold, the sample is excluded
na_threshold_perc <- 0.1
to_report <- paste('Selected NAs percentage threshold: ', na_threshold_perc, sep = '')
cat(to_report, file = report_file, sep = '\n', append = TRUE)
# RTC criterion threshold
rtc_threshold <- 5
to_report <- paste('Selected RTC threshold: ', rtc_threshold, sep = '')
cat(to_report, file = report_file, sep = '\n', append = TRUE)
# Select endogenous or exogenous normalization
normalization_en_ex <- 'endogenous'
# Select sign.f.table p-val criterion
sign_table_pval <- 0.01
# Mirs: select validated or predicted
validated_or_predicted <- 'validated'
# select go_enrich criterion
go_criterion <- 0.05
# select the KEGG enrich criterion
kegg_enrich_criterion <- 0.05
#### MAIN CODE #########
list.files()
mirs<- fread("miRs_annotation_3plates.csv")
data<- fread("miRNome_data.csv")
meta<- fread("phenodata.csv")
head(meta)
data<- as.data.frame(data)
data$ID<- mirs$`miRNA ID`
data$plate<- mirs$Plate
head(data)
# Substitutes the ',' charachter with '.' and then converts strings to numeric data
# 2 stands for "iterate over columns"
data[,c(2:7)]<- apply(apply(data[,c(2:7)], 2, gsub, patt=",", replace="."), 2, as.numeric)
# Drop data with "blank" ID
data <- data[c(which(data$ID != "blank")), ]
write.csv(data, 'total_data.csv')
#TO DO: merge the three plates before the diff analysis
# Initial sample names
normalized_data <- NULL
# QC analysis
for (plate in plates){
print(paste('Analysis for plate ', plate, sep = ''))
norm_data <- QC(copy(data), plate, 'output', na_threshold_perc, rtc_threshold ,normalization_en_ex, report_file)
norm_data$plate <- paste('Plate', plate, sep = ' ')
if (is.null(normalized_data)){
normalized_data <- rbind(normalized_data, norm_data)
} else {
normalized_data <- normalized_data[,which(colnames(normalized_data) %in% colnames(norm_data))]
norm_data <- norm_data[,which(colnames(norm_data) %in% colnames(normalized_data))]
normalized_data <- rbind(normalized_data, norm_data)
}
}
if (!is.null(normalized_data)){
# diff analysis and functional analysis
normalized_data<- normalized_data[!duplicated(normalized_data$ID),]
write.csv(normalized_data, 'output/Tables/normalized_data.csv')
sign.table.f <- diff_analysis(normalized_data[,-dim(normalized_data)[2]], meta, 'output/Differential Analysis', sign_table_pval)
functional_analysis(sign.table.f, validated_or_predicted, kegg_enrich_criterion, go_criterion, 'output/Functional Analysis')
} else{
# Todo: add some warnings - tasks here
print("All plates were rejected from quality control analysis")
}
# 1: input yaml, koitaw to senario (gia ta krithria - parametrous)
# 2: Kanw pio sugkekrimena ta sxolia apo apopsh kwdika
# 2.5: Pws ena project sthn R ginetia paketo, diavasma
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
getwd()
analysis.path=getwd()  ;analysis.path
#analysis.path <- "D://exosomes//data"
# clear
cat("\014")
rm(list = ls())
dev.off(dev.list()["RStudioGD"])
getwd()
analysis.path=getwd()  ;analysis.path
#analysis.path <- "D://exosomes//data"
#setwd(analysis.path)
getwd()
# Installing packages
#install.packages("tidyverse")
#install.packages("naniar")
#BiocManager::install("prada")
# Source files
# qc.R : quality control
# diff_analysis.R : differential analysis
# fa.R : functional analysis
source("qc.R")
source("diff_analysis.R")
source("fa.R")
# Libraries
library(devtools)
library(data.table)
library(tidyverse)
library(naniar)
library(prada)
library(gsubfn)
# Num of plates
plates <- c(1:3)
# Creating output folder
dir.create("output")
for (plate in plates){
to_create <- paste('output/plate', plate, sep = '')
dir.create(to_create)
}
dir.create("output/Differential Analysis")
dir.create("output/Functional Analysis")
dir.create("output/Tables")
# Creating the report file
report_file <- 'output/report.txt'
file.create(report_file)
# Threshold percentage (values: from 0 to 1)
# In case the percentage of NA's is higher than threshold, the sample is excluded
na_threshold_perc <- 0.1
to_report <- paste('Selected NAs percentage threshold: ', na_threshold_perc, sep = '')
cat(to_report, file = report_file, sep = '\n', append = TRUE)
# RTC criterion threshold
rtc_threshold <- 5
to_report <- paste('Selected RTC threshold: ', rtc_threshold, sep = '')
cat(to_report, file = report_file, sep = '\n', append = TRUE)
# Select endogenous or exogenous normalization
normalization_en_ex <- 'endogenous'
# Select sign.f.table p-val criterion
sign_table_pval <- 0.01
# Mirs: select validated or predicted
validated_or_predicted <- 'validated'
# select go_enrich criterion
go_criterion <- 0.05
# select the KEGG enrich criterion
kegg_enrich_criterion <- 0.05
#### MAIN CODE #########
list.files()
mirs<- fread("miRs_annotation_3plates.csv")
data<- fread("miRNome_data.csv")
meta<- fread("phenodata.csv")
head(meta)
data<- as.data.frame(data)
data$ID<- mirs$`miRNA ID`
data$plate<- mirs$Plate
head(data)
# Substitutes the ',' charachter with '.' and then converts strings to numeric data
# 2 stands for "iterate over columns"
data[,c(2:7)]<- apply(apply(data[,c(2:7)], 2, gsub, patt=",", replace="."), 2, as.numeric)
# Drop data with "blank" ID
data <- data[c(which(data$ID != "blank")), ]
write.csv(data, 'total_data.csv')
#TO DO: merge the three plates before the diff analysis
# Initial sample names
normalized_data <- NULL
# QC analysis
for (plate in plates){
print(paste('Analysis for plate ', plate, sep = ''))
norm_data <- QC(copy(data), plate, 'output', na_threshold_perc, rtc_threshold ,normalization_en_ex, report_file)
norm_data$plate <- paste('Plate', plate, sep = ' ')
if (is.null(normalized_data)){
normalized_data <- rbind(normalized_data, norm_data)
} else {
normalized_data <- normalized_data[,which(colnames(normalized_data) %in% colnames(norm_data))]
norm_data <- norm_data[,which(colnames(norm_data) %in% colnames(normalized_data))]
normalized_data <- rbind(normalized_data, norm_data)
}
}
if (!is.null(normalized_data)){
# diff analysis and functional analysis
normalized_data<- normalized_data[!duplicated(normalized_data$ID),]
write.csv(normalized_data, 'output/Tables/normalized_data.csv')
sign.table.f <- diff_analysis(normalized_data[,-dim(normalized_data)[2]], meta, 'output/Differential Analysis', sign_table_pval)
functional_analysis(sign.table.f, validated_or_predicted, kegg_enrich_criterion, go_criterion, 'output/Functional Analysis')
} else{
# Todo: add some warnings - tasks here
print("All plates were rejected from quality control analysis")
}
# 1: input yaml, koitaw to senario (gia ta krithria - parametrous)
# 2: Kanw pio sugkekrimena ta sxolia apo apopsh kwdika
# 2.5: Pws ena project sthn R ginetia paketo, diavasma
